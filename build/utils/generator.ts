import type { Concept } from './concepts.ts'
import { DocBlock } from './docs.ts'
import concepts from '../data/concepts.json' with { type: 'json' }

type Stringable = string | { toString(): string }
export const appendTextFile = (destPath: string, data: Stringable): void =>
	Deno.writeTextFileSync(destPath, data.toString(), { append: true })

type GenerateOptions = {
	// - used for source, which gets interpreted as the relative file within ./build directory
	// - used for write destination, which gets reinterpreted as `./src/{path}`
	path: string

	// concept identifier for `data/concepts.json`
	conceptIdent: string

	// human-readable version of conceptIdent
	conceptName: string

	// business logic function
	generateFn: (destPath: string, concept: Concept) => void
}

export const generate = (options: GenerateOptions): void => {
	// prepare build script by starting timer
	// and resetting file
	const {
		path,
		conceptIdent,
		conceptName,
		generateFn,
	} = options

	console.time(conceptIdent)
	const destPath = `./src/${path}`
	Deno.truncateSync(destPath)

	// add file preface
	const preface = new DocBlock()
	preface.summary += `This file is generated via \`build/${path}\`.\n`
	preface.summary += 'To regenerate this file, run `deno task build`.\n'
	preface.summary += 'Do NOT edit this file directly.\n'
	appendTextFile(destPath, `${preface.toString()}\n\n`)

	// deno-fmt-ignore
	// deno-lint-ignore no-explicit-any
	const targetConcept = concepts.find((target) => target.concept === conceptIdent) as any as Concept
	generateFn(destPath, targetConcept)

	// finalize build script
	let logMessage = ''
	logMessage += destPath
	logMessage += `: Exported ${targetConcept.values.length} ${conceptName}`
	console.log(logMessage)
	console.timeEnd(conceptIdent)
}

export const aliasWithDocBlock = (docBlock: DocBlock, alias: string): string =>
	`${docBlock}\n${alias}\n\n`
